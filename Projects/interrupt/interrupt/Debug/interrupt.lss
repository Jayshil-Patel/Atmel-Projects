
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000fa  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000416  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012f  00000000  00000000  00000d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000353  00000000  00000000  00000e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  000011e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000107  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  0000132f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>
#define F_CPU 1000000UL

int main(void)
{
	DDRC=0x08;
  92:	88 e0       	ldi	r24, 0x08	; 8
  94:	84 bb       	out	0x14, r24	; 20
	PORTD|=1<<2;
  96:	92 9a       	sbi	0x12, 2	; 18
	DDRA=0xff;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8a bb       	out	0x1a, r24	; 26
	
	MCUCR=0x02;
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	85 bf       	out	0x35, r24	; 53
	GICR=0x40;
  a0:	80 e4       	ldi	r24, 0x40	; 64
  a2:	8b bf       	out	0x3b, r24	; 59
	sei();
  a4:	78 94       	sei
    while(1)
	{
		PORTA=0xff;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f e3       	ldi	r18, 0x3F	; 63
  ac:	3d e0       	ldi	r19, 0x0D	; 13
  ae:	43 e0       	ldi	r20, 0x03	; 3
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	30 40       	sbci	r19, 0x00	; 0
  b4:	40 40       	sbci	r20, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x1e>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x28>
  ba:	00 00       	nop
		_delay_ms(1000);
		PORTA=0x00;
  bc:	1b ba       	out	0x1b, r1	; 27
  be:	2f e3       	ldi	r18, 0x3F	; 63
  c0:	3d e0       	ldi	r19, 0x0D	; 13
  c2:	43 e0       	ldi	r20, 0x03	; 3
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	30 40       	sbci	r19, 0x00	; 0
  c8:	40 40       	sbci	r20, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x32>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x3c>
  ce:	00 00       	nop
  d0:	eb cf       	rjmp	.-42     	; 0xa8 <main+0x16>

000000d2 <__vector_1>:
		_delay_ms(1000);
	}
}	
   ISR(INT0_vect)
   {
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
	   PORTC^=0x08;
  e0:	95 b3       	in	r25, 0x15	; 21
  e2:	88 e0       	ldi	r24, 0x08	; 8
  e4:	89 27       	eor	r24, r25
  e6:	85 bb       	out	0x15, r24	; 21
   }
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
