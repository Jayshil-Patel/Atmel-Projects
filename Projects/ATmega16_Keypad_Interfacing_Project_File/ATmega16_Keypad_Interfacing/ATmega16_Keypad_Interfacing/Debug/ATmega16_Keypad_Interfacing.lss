
ATmega16_Keypad_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000002f8  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080007c  0080007c  000003a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca1  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000817  00000000  00000000  00001125  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065a  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000472  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e9  00000000  00000000  000024ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000026b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  8a:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keyfind>:

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;                /* set port direction as input-output */
  92:	30 ef       	ldi	r19, 0xF0	; 240
		KEY_PRT = 0xFF;
  94:	2f ef       	ldi	r18, 0xFF	; 255
			_delay_ms (40);				   /* 20 ms key debounce time */
			colloc = (KEY_PIN & 0x0F);
		}while(colloc == 0x0F);

	/* now check for rows */
		KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
  96:	9f ee       	ldi	r25, 0xEF	; 239
		{
			rowloc = 0;
			break;
		}

		KEY_PRT = 0xDF;			  /* check for pressed key in 2nd row */
  98:	6f ed       	ldi	r22, 0xDF	; 223
		{
			rowloc = 1;
			break;
		}
		
		KEY_PRT = 0xBF;			  /* check for pressed key in 3rd row */
  9a:	5f eb       	ldi	r21, 0xBF	; 191
		{
			rowloc = 2;
			break;
		}

		KEY_PRT = 0x7F;			  /* check for pressed key in 4th row */
  9c:	4f e7       	ldi	r20, 0x7F	; 127

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;                /* set port direction as input-output */
  9e:	3a bb       	out	0x1a, r19	; 26
		KEY_PRT = 0xFF;
  a0:	2b bb       	out	0x1b, r18	; 27

		do
		{
			KEY_PRT &= 0x0F;           /* mask PORT for column read only */
  a2:	8b b3       	in	r24, 0x1b	; 27
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
  a8:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); /* read status of column */
  aa:	89 b3       	in	r24, 0x19	; 25
  ac:	8f 70       	andi	r24, 0x0F	; 15
  ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		}while(colloc != 0x0F);
  b2:	8f 30       	cpi	r24, 0x0F	; 15
  b4:	b1 f7       	brne	.-20     	; 0xa2 <keyfind+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	ef e3       	ldi	r30, 0x3F	; 63
  b8:	fc e9       	ldi	r31, 0x9C	; 156
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <keyfind+0x28>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <keyfind+0x2e>
  c0:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);			   /* 20ms key debounce time */
				colloc = (KEY_PIN & 0x0F); /* read status of column */
  c2:	89 b3       	in	r24, 0x19	; 25
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
			}while(colloc == 0x0F);        /* check for any key press */
  ca:	8f 30       	cpi	r24, 0x0F	; 15
  cc:	a1 f3       	breq	.-24     	; 0xb6 <keyfind+0x24>
  ce:	ff ef       	ldi	r31, 0xFF	; 255
  d0:	79 ef       	ldi	r23, 0xF9	; 249
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	f1 50       	subi	r31, 0x01	; 1
  d6:	70 40       	sbci	r23, 0x00	; 0
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <keyfind+0x42>
  dc:	00 c0       	rjmp	.+0      	; 0xde <keyfind+0x4c>
  de:	00 00       	nop
			
			_delay_ms (40);				   /* 20 ms key debounce time */
			colloc = (KEY_PIN & 0x0F);
  e0:	89 b3       	in	r24, 0x19	; 25
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		}while(colloc == 0x0F);
  e8:	8f 30       	cpi	r24, 0x0F	; 15
  ea:	29 f3       	breq	.-54     	; 0xb6 <keyfind+0x24>

	/* now check for rows */
		KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
  ec:	9b bb       	out	0x1b, r25	; 27
		asm("NOP");
  ee:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
  f0:	89 b3       	in	r24, 0x19	; 25
  f2:	8f 70       	andi	r24, 0x0F	; 15
  f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		if(colloc != 0x0F)
  f8:	8f 30       	cpi	r24, 0x0F	; 15
  fa:	19 f0       	breq	.+6      	; 0x102 <keyfind+0x70>
		{
			rowloc = 0;
  fc:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <rowloc>
			break;
 100:	24 c0       	rjmp	.+72     	; 0x14a <keyfind+0xb8>
		}

		KEY_PRT = 0xDF;			  /* check for pressed key in 2nd row */
 102:	6b bb       	out	0x1b, r22	; 27
		asm("NOP");
 104:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 106:	89 b3       	in	r24, 0x19	; 25
 108:	8f 70       	andi	r24, 0x0F	; 15
 10a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		if(colloc != 0x0F)
 10e:	8f 30       	cpi	r24, 0x0F	; 15
 110:	21 f0       	breq	.+8      	; 0x11a <keyfind+0x88>
		{
			rowloc = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <rowloc>
			break;
 118:	18 c0       	rjmp	.+48     	; 0x14a <keyfind+0xb8>
		}
		
		KEY_PRT = 0xBF;			  /* check for pressed key in 3rd row */
 11a:	5b bb       	out	0x1b, r21	; 27
		asm("NOP");
 11c:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 11e:	89 b3       	in	r24, 0x19	; 25
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		if(colloc != 0x0F)
 126:	8f 30       	cpi	r24, 0x0F	; 15
 128:	21 f0       	breq	.+8      	; 0x132 <keyfind+0xa0>
		{
			rowloc = 2;
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <rowloc>
			break;
 130:	0c c0       	rjmp	.+24     	; 0x14a <keyfind+0xb8>
		}

		KEY_PRT = 0x7F;			  /* check for pressed key in 4th row */
 132:	4b bb       	out	0x1b, r20	; 27
		asm("NOP");
 134:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 136:	89 b3       	in	r24, 0x19	; 25
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		if(colloc != 0x0F)
 13e:	8f 30       	cpi	r24, 0x0F	; 15
 140:	09 f4       	brne	.+2      	; 0x144 <keyfind+0xb2>
 142:	ad cf       	rjmp	.-166    	; 0x9e <keyfind+0xc>
		{
			rowloc = 3;
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <rowloc>
			break;
		}
	}

	if(colloc == 0x0E)
 14a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 14e:	8e 30       	cpi	r24, 0x0E	; 14
 150:	59 f4       	brne	.+22     	; 0x168 <keyfind+0xd6>
		return(keypad[rowloc][0]);
 152:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <rowloc>
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	e0 5a       	subi	r30, 0xA0	; 160
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	80 81       	ld	r24, Z
 166:	08 95       	ret
	else if(colloc == 0x0D)
 168:	8d 30       	cpi	r24, 0x0D	; 13
 16a:	59 f4       	brne	.+22     	; 0x182 <keyfind+0xf0>
		return(keypad[rowloc][1]);
 16c:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <rowloc>
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e0 5a       	subi	r30, 0xA0	; 160
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	81 81       	ldd	r24, Z+1	; 0x01
 180:	08 95       	ret
	else if(colloc == 0x0B)
 182:	8b 30       	cpi	r24, 0x0B	; 11
 184:	59 f4       	brne	.+22     	; 0x19c <keyfind+0x10a>
		return(keypad[rowloc][2]);
 186:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <rowloc>
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	e0 5a       	subi	r30, 0xA0	; 160
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	82 81       	ldd	r24, Z+2	; 0x02
 19a:	08 95       	ret
	else
		return(keypad[rowloc][3]);
 19c:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <rowloc>
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	e0 5a       	subi	r30, 0xA0	; 160
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	83 81       	ldd	r24, Z+3	; 0x03
}
 1b0:	08 95       	ret

000001b2 <main>:

int main(void)
{
	LCD_Init();
 1b2:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_Init>
	LCD_String_xy(1,0,"Press a key");
 1b6:	40 e7       	ldi	r20, 0x70	; 112
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_String_xy>
    while(1)
	{
		LCD_Command(0xc0);
 1c2:	80 ec       	ldi	r24, 0xC0	; 192
 1c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Command>
		LCD_Char(keyfind());             /* Display which key is pressed */
 1c8:	0e 94 49 00 	call	0x92	; 0x92 <keyfind>
 1cc:	0e 94 12 01 	call	0x224	; 0x224 <LCD_Char>
	}
 1d0:	f8 cf       	rjmp	.-16     	; 0x1c2 <main+0x10>

000001d2 <LCD_Command>:
 */ 

#include "LCD16x2_4bit.h"
void LCD_Command(unsigned char cmnd)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd & 0xf0);		/* SEND COMMAND TO DATA PORT */
 1d2:	98 b3       	in	r25, 0x18	; 24
 1d4:	28 2f       	mov	r18, r24
 1d6:	20 7f       	andi	r18, 0xF0	; 240
 1d8:	9f 70       	andi	r25, 0x0F	; 15
 1da:	92 2b       	or	r25, r18
 1dc:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT &= ~ (1<<LCD_RS);						/* RS = 0 FOR COMMAND */
 1de:	c0 98       	cbi	0x18, 0	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
 1e0:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	32 e0       	ldi	r19, 0x02	; 2
 1e4:	3a 95       	dec	r19
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCD_Command+0x12>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD_Command+0x18>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
 1ea:	c1 98       	cbi	0x18, 1	; 24
 1ec:	e7 ec       	ldi	r30, 0xC7	; 199
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <LCD_Command+0x1e>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <LCD_Command+0x24>
 1f6:	00 00       	nop
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd << 4);		/* SEND COMMAND TO DATA PORT */
 1f8:	28 b3       	in	r18, 0x18	; 24
 1fa:	f0 e1       	ldi	r31, 0x10	; 16
 1fc:	8f 9f       	mul	r24, r31
 1fe:	c0 01       	movw	r24, r0
 200:	11 24       	eor	r1, r1
 202:	92 2f       	mov	r25, r18
 204:	9f 70       	andi	r25, 0x0F	; 15
 206:	89 2b       	or	r24, r25
 208:	88 bb       	out	0x18, r24	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
 20a:	c1 9a       	sbi	0x18, 1	; 24
 20c:	32 e0       	ldi	r19, 0x02	; 2
 20e:	3a 95       	dec	r19
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_Command+0x3c>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_Command+0x42>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
 214:	c1 98       	cbi	0x18, 1	; 24
 216:	8f e9       	ldi	r24, 0x9F	; 159
 218:	9f e0       	ldi	r25, 0x0F	; 15
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCD_Command+0x48>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <LCD_Command+0x4e>
 220:	00 00       	nop
 222:	08 95       	ret

00000224 <LCD_Char>:
	_delay_us(2000);								/* WAIT FOR MAKE ENABLE WIDE */
}

void LCD_Char(unsigned char data)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data & 0xf0);		/* SEND DATA TO DATA PORT */
 224:	98 b3       	in	r25, 0x18	; 24
 226:	28 2f       	mov	r18, r24
 228:	20 7f       	andi	r18, 0xF0	; 240
 22a:	9f 70       	andi	r25, 0x0F	; 15
 22c:	92 2b       	or	r25, r18
 22e:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT |= (1<<LCD_RS);						/* MAKE RS = 1 FOR DATA */
 230:	c0 9a       	sbi	0x18, 0	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE */
 232:	c1 9a       	sbi	0x18, 1	; 24
 234:	32 e0       	ldi	r19, 0x02	; 2
 236:	3a 95       	dec	r19
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_Char+0x12>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_Char+0x18>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
 23c:	c1 98       	cbi	0x18, 1	; 24
 23e:	e7 ec       	ldi	r30, 0xC7	; 199
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <LCD_Char+0x1e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <LCD_Char+0x24>
 248:	00 00       	nop
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data << 4);		/*  */
 24a:	28 b3       	in	r18, 0x18	; 24
 24c:	f0 e1       	ldi	r31, 0x10	; 16
 24e:	8f 9f       	mul	r24, r31
 250:	c0 01       	movw	r24, r0
 252:	11 24       	eor	r1, r1
 254:	92 2f       	mov	r25, r18
 256:	9f 70       	andi	r25, 0x0F	; 15
 258:	89 2b       	or	r24, r25
 25a:	88 bb       	out	0x18, r24	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE*/
 25c:	c1 9a       	sbi	0x18, 1	; 24
 25e:	32 e0       	ldi	r19, 0x02	; 2
 260:	3a 95       	dec	r19
 262:	f1 f7       	brne	.-4      	; 0x260 <LCD_Char+0x3c>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_Char+0x42>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE*/
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE*/
 266:	c1 98       	cbi	0x18, 1	; 24
 268:	8f e9       	ldi	r24, 0x9F	; 159
 26a:	9f e0       	ldi	r25, 0x0F	; 15
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_Char+0x48>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_Char+0x4e>
 272:	00 00       	nop
 274:	08 95       	ret

00000276 <LCD_Init>:
	_delay_us(2000);								/* WAIT FOR MAKE ENABLE WIDE*/
}

void LCD_Init()
{
	LCD_DDDR = 0xFF;
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	8f e3       	ldi	r24, 0x3F	; 63
 27c:	9c e9       	ldi	r25, 0x9C	; 156
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <LCD_Init+0x8>
 282:	00 c0       	rjmp	.+0      	; 0x284 <LCD_Init+0xe>
 284:	00 00       	nop
	_delay_ms(20);									/* WAIT FOR SOME TIME */
	LCD_Command(0x02);								/* SEND $32 FOR INIT OT 0X02 */
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Command>
	LCD_Command(0x28);								/* INIT. LCD 2 LINE, 5 X 7 MATRIX */
 28c:	88 e2       	ldi	r24, 0x28	; 40
 28e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Command>
	LCD_Command(0x0C);								/* DISPLAY ON CURSOR ON */
 292:	8c e0       	ldi	r24, 0x0C	; 12
 294:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Command>
	LCD_Command(0x01);								/* LCD CLEAR */
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Command>
	LCD_Command(0x82);								/* SHIFT CURSOR TO WRITE */
 29e:	82 e8       	ldi	r24, 0x82	; 130
 2a0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Command>
 2a4:	08 95       	ret

000002a6 <LCD_String>:
	
	LCD_String(str);								/* Call LCD string function */
}

void LCD_String(char *str)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 2ac:	88 81       	ld	r24, Y
 2ae:	88 23       	and	r24, r24
 2b0:	31 f0       	breq	.+12     	; 0x2be <LCD_String+0x18>
 2b2:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);							/* Call LCD data write */
 2b4:	0e 94 12 01 	call	0x224	; 0x224 <LCD_Char>
}

void LCD_String(char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 2b8:	89 91       	ld	r24, Y+
 2ba:	81 11       	cpse	r24, r1
 2bc:	fb cf       	rjmp	.-10     	; 0x2b4 <LCD_String+0xe>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <LCD_String_xy>:
	LCD_Command(0x01);								/* LCD CLEAR */
	LCD_Command(0x82);								/* SHIFT CURSOR TO WRITE */
}

void LCD_String_xy(unsigned char row, unsigned char pos, char *str)
{
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	ea 01       	movw	r28, r20
	if (row == 1)
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	31 f4       	brne	.+12     	; 0x2da <LCD_String_xy+0x16>
		LCD_Command((pos & 0x0F)|0x80);				/* Command of first row and required position<16 */
 2ce:	86 2f       	mov	r24, r22
 2d0:	8f 70       	andi	r24, 0x0F	; 15
 2d2:	80 68       	ori	r24, 0x80	; 128
 2d4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Command>
 2d8:	07 c0       	rjmp	.+14     	; 0x2e8 <LCD_String_xy+0x24>
	else if (row == 2)
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	29 f4       	brne	.+10     	; 0x2e8 <LCD_String_xy+0x24>
		LCD_Command((pos & 0x0F)|0xC0);				/* Command of Second row and required position<16 */
 2de:	86 2f       	mov	r24, r22
 2e0:	8f 70       	andi	r24, 0x0F	; 15
 2e2:	80 6c       	ori	r24, 0xC0	; 192
 2e4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Command>
	
	LCD_String(str);								/* Call LCD string function */
 2e8:	ce 01       	movw	r24, r28
 2ea:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_String>
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
