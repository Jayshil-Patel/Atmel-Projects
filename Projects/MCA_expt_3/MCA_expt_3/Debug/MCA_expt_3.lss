
MCA_expt_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ce  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000898  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000327  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000099  00000000  00000000  00000c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000295  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000009e  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000022  00000000  00000000  00001032  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


#include <avr/io.h>
int main(void)
{
	DDRA = 0XFF; //set PORTA as OUTPUT port.
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	DDRB = DDRB & 0b11111100; //set PORTB pin PBO and PB1 as input port.
  96:	87 b3       	in	r24, 0x17	; 23
  98:	8c 7f       	andi	r24, 0xFC	; 252
  9a:	87 bb       	out	0x17, r24	; 23
		z = PINB;
		z = z & 0b00000011; //masking last two bits of PORTB.
		switch(z)
		{
			case(0):
			PORTA = 0x55; //pattern1
  9c:	45 e5       	ldi	r20, 0x55	; 85
			break;
			case(1):
			PORTA = 0xAA; //pattern2
			break;
			case(2):
			PORTA = 0xF0; //pattern3
  9e:	30 ef       	ldi	r19, 0xF0	; 240
			break;
			case(3):
			PORTA = 0x0F; //pattern4
  a0:	2f e0       	ldi	r18, 0x0F	; 15
		{
			case(0):
			PORTA = 0x55; //pattern1
			break;
			case(1):
			PORTA = 0xAA; //pattern2
  a2:	9a ea       	ldi	r25, 0xAA	; 170
	DDRA = 0XFF; //set PORTA as OUTPUT port.
	DDRB = DDRB & 0b11111100; //set PORTB pin PBO and PB1 as input port.
	unsigned char z;
	while(1)
	{
		z = PINB;
  a4:	86 b3       	in	r24, 0x16	; 22
		z = z & 0b00000011; //masking last two bits of PORTB.
  a6:	83 70       	andi	r24, 0x03	; 3
		switch(z)
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	49 f0       	breq	.+18     	; 0xbe <main+0x2c>
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	28 f0       	brcs	.+10     	; 0xba <main+0x28>
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	39 f0       	breq	.+14     	; 0xc2 <main+0x30>
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	b1 f7       	brne	.-20     	; 0xa4 <main+0x12>
  b8:	06 c0       	rjmp	.+12     	; 0xc6 <main+0x34>
		{
			case(0):
			PORTA = 0x55; //pattern1
  ba:	4b bb       	out	0x1b, r20	; 27
			break;
  bc:	f3 cf       	rjmp	.-26     	; 0xa4 <main+0x12>
			case(1):
			PORTA = 0xAA; //pattern2
  be:	9b bb       	out	0x1b, r25	; 27
			break;
  c0:	f1 cf       	rjmp	.-30     	; 0xa4 <main+0x12>
			case(2):
			PORTA = 0xF0; //pattern3
  c2:	3b bb       	out	0x1b, r19	; 27
			break;
  c4:	ef cf       	rjmp	.-34     	; 0xa4 <main+0x12>
			case(3):
			PORTA = 0x0F; //pattern4
  c6:	2b bb       	out	0x1b, r18	; 27
			break;
  c8:	ed cf       	rjmp	.-38     	; 0xa4 <main+0x12>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
